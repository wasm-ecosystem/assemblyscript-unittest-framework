// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parser generateFileCoverage 1`] = `
[
  FileCoverageResult {
    "branchCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "filename": [
      "test/A.ts",
      [
        {
          "name": "",
          "range": [
            39,
            39,
          ],
        },
        {
          "name": "test/A/Foo#check",
          "range": [
            20,
            24,
          ],
        },
        {
          "name": "",
          "range": [
            4,
            12,
          ],
        },
      ],
    ],
    "functionCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "lineCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "sourceUsedCount": [
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
    ],
    "statementCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "uncoveredlines": Set {},
  },
  FileCoverageResult {
    "branchCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "filename": [
      "test/B.ts",
      [
        {
          "name": "test/B/checkMemory",
          "range": [
            45,
            45,
          ],
        },
      ],
    ],
    "functionCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "lineCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "sourceUsedCount": [
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
    ],
    "statementCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "uncoveredlines": Set {},
  },
  FileCoverageResult {
    "branchCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "filename": [
      "test/C.ts",
      [
        {
          "name": "",
          "range": [
            3,
            40,
          ],
        },
        {
          "name": "",
          "range": [
            42,
            44,
          ],
        },
      ],
    ],
    "functionCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "lineCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "sourceUsedCount": [
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
    ],
    "statementCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "uncoveredlines": Set {},
  },
  FileCoverageResult {
    "branchCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "filename": [
      "test/D.ts",
      [
        {
          "name": "test/D/visit",
          "range": [
            10,
            11,
          ],
        },
      ],
    ],
    "functionCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "lineCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "sourceUsedCount": [
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
      CodeCoverage {
        "source": "",
        "usedCount": -1,
      },
    ],
    "statementCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "uncoveredlines": Set {},
  },
]
`;

exports[`Parser generateFunctionCoverage 1`] = `
[
  FunctionCoverageResult {
    "branchCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "functionName": "test/A/Foo#failString",
    "lineRange": [
      39,
      39,
    ],
    "sourceUsedCount": Map {
      39 => 3,
    },
    "uncoveredlines": Set {},
  },
  FunctionCoverageResult {
    "branchCoverageRate": Rate {
      "total": 4,
      "used": 4,
    },
    "functionName": "test/A/Foo#check",
    "lineRange": [
      16,
      24,
    ],
    "sourceUsedCount": Map {
      16 => 3,
      17 => 3,
      18 => 2,
      19 => 2,
      20 => 2,
      21 => 2,
      22 => 1,
      24 => 2,
    },
    "uncoveredlines": Set {},
  },
  FunctionCoverageResult {
    "branchCoverageRate": Rate {
      "total": 1,
      "used": 1,
    },
    "functionName": "test/B/checkMemory",
    "lineRange": [
      45,
      45,
    ],
    "sourceUsedCount": Map {
      45 => 4,
    },
    "uncoveredlines": Set {},
  },
  FunctionCoverageResult {
    "branchCoverageRate": Rate {
      "total": 4,
      "used": 3,
    },
    "functionName": "test/C/bar",
    "lineRange": [
      10,
      29,
    ],
    "sourceUsedCount": Map {
      10 => 2,
      11 => 2,
      14 => 4,
      15 => 2,
      19 => 2,
      22 => 1,
      24 => 1,
      25 => 1,
      26 => 1,
      29 => 0,
    },
    "uncoveredlines": Set {
      25,
    },
  },
  FunctionCoverageResult {
    "branchCoverageRate": Rate {
      "total": 0,
      "used": 0,
    },
    "functionName": "test/D/visit",
    "lineRange": [
      10,
      11,
    ],
    "sourceUsedCount": Map {
      10 => 2,
      11 => 2,
    },
    "uncoveredlines": Set {},
  },
]
`;

exports[`Parser traceParse 1`] = `
Map {
  "test/A/Foo#failString" => {
    "branchInfo": [],
    "lineInfo": Map {
      0 => Set {
        39,
      },
    },
  },
  "test/A/Foo#emptyFunction" => {
    "branchInfo": [],
    "lineInfo": Map {
      0 => Set {
        56,
      },
      1 => Set {
        57,
      },
    },
  },
  "test/A/Foo#check" => {
    "branchInfo": [
      [
        1,
        2,
      ],
      [
        1,
        3,
      ],
      [
        0,
        1,
      ],
      [
        0,
        5,
      ],
    ],
    "lineInfo": Map {
      0 => Set {
        16,
        17,
      },
      1 => Set {
        18,
        19,
        20,
        21,
      },
      2 => Set {
        22,
      },
      3 => Set {
        24,
      },
      4 => Set {},
      5 => Set {
        24,
      },
    },
  },
  "test/B/checkMemory" => {
    "branchInfo": [
      [
        0,
        1,
      ],
    ],
    "lineInfo": Map {
      0 => Set {
        45,
      },
      1 => Set {
        45,
      },
    },
  },
  "test/C/bar<f32>" => {
    "branchInfo": [
      [
        1,
        2,
      ],
      [
        1,
        3,
      ],
    ],
    "lineInfo": Map {
      0 => Set {
        10,
        11,
      },
      1 => Set {
        14,
      },
      2 => Set {
        15,
      },
      3 => Set {
        19,
      },
    },
  },
  "test/C/bar<~lib/set/Set<f32>>" => {
    "branchInfo": [
      [
        1,
        2,
      ],
      [
        1,
        3,
      ],
    ],
    "lineInfo": Map {
      0 => Set {
        22,
        24,
      },
      1 => Set {
        25,
      },
      2 => Set {
        26,
      },
      3 => Set {
        29,
      },
    },
  },
  "test/D/visit<f32>" => {
    "branchInfo": [],
    "lineInfo": Map {
      0 => Set {
        10,
        11,
      },
    },
  },
}
`;

exports[`Parser traceParse 2`] = `
Map {
  "test/A/Foo#failString" => [
    0,
    0,
    0,
  ],
  "test/A/Foo#check" => [
    0,
    1,
    2,
    0,
    1,
    3,
    0,
    5,
  ],
  "test/B/checkMemory" => [
    0,
    1,
    0,
    1,
  ],
  "test/C/bar<f32>" => [
    0,
    1,
    2,
    1,
    3,
    0,
    1,
    2,
    1,
    3,
  ],
  "test/C/bar<~lib/set/Set<f32>>" => [
    0,
    1,
    2,
  ],
  "test/D/visit<f32>" => [
    0,
    0,
  ],
}
`;
